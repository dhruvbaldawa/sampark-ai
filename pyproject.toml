[tool.poetry]
name = "sampark-ai"
version = "0.1.0"
description = "LLM-powered agent that processes tasks received via email"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "sampark", from = "backend"}]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.10.6"
pydantic-ai = "^0.0.41"
fastapi = "^0.115.11"
uvicorn = "^0.34.0"
email-listener = "^1.2"
jinja2 = "^3.1.6"
structlog = "^25.2.0"
httpx = "^0.28.1"
python-dotenv = "^1.0.1"
aiosmtplib = "^4.0.0"
tenacity = "^9.0.0"
dependency-injector = "^4.46.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.27"}
aiosqlite = "^0.19.0"
python-ulid = "^2.2.0"
greenlet = "^3.1.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.25.3"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.11.0"
pyright = "^1.1.396"
pre-commit = "^4.1.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Enable Pyflakes ('F'), pycodestyle ('E'), isort ('I')
select = ["E", "F", "I", "W", "N", "B", "UP", "C90", "RUF"]
ignore = []
# Same as Black.
line-length = 120
# Assume Python 3.12
target-version = "py312"
# Sort imports
fix = true
unsafe-fixes = false

[tool.ruff.isort]
known-first-party = ["sampark"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["backend"]
exclude = ["**/node_modules", "**/__pycache__", "**/.mypy_cache"]
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.12"
pythonPlatform = "All"

[tool.pytest.ini_options]
testpaths = ["backend"]
python_files = ["test_*.py", "*_test.py"]
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "*_test.py",
    "test_*.py",
    "*/tests/*",
]
